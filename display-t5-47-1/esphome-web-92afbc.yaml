#external_components:
#  - source: github://ashald/esphome@lilygo-t5-47
#    components:
#      - lilygo_t5_47
#
#  - source: github://tiaanv/esphome-components
#    components: ["t547"]

#  - platform: t547
#    id: t5_display

substitutions:
  esp_name: ESP Display #Device Name
  esp_hostname: display-t5-47-1 
  ip_address: 192.168.1.29
  ip_gw: 192.168.1.254
  ip_netmask: 255.255.255.0
  run_time: 1min #can be as long as needed to get data 
  sleep_time: 1min # normal sleep time
  night_sleep_time: 1h # sleep time after midnight
  
esphome:
  name: ${esp_hostname}
  platform: ESP32
  board: esp32dev
  platformio_options:
    board_upload.flash_size: 16MB

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
#  manual_ip:
#    static_ip: ${ip_address}
#    gateway: ${ip_gw}
#    subnet: ${ip_netmask}
  ap:
    ssid: "${esp_name} Fallback Hotspot"
    password: !secret fallback_password

deep_sleep:
  run_duration: ${run_time} 
  sleep_duration: ${sleep_time}
  id: deep_sleep_1
  esp32_ext1_wakeup:
    pins: GPIO39
    mode: ALL_LOW

captive_portal:

ota:

external_components:
  - source: github://ashald/esphome@lilygo-t5-47
    components:
      - lilygo_t5_47

# Enable logging
logger:

# Enable Home Assistant API
api:

time:
  - platform: homeassistant
    id: ntp

spi:
  clk_pin: 18
  mosi_pin: 23

font:
  - file: "fonts/Google_Sans_Bold.ttf"
    id: font_name
    size: 38
  - file: "fonts/Google_Sans_Medium.ttf"
    id: font_value
    size: 56    
  - file: "fonts/Google_Sans_Medium.ttf"
    id: font_units
    size: 36    
  - file: "fonts/Google_Sans_Medium.ttf"
    id: font_footer
    size: 28    

    # https://pictogrammers.github.io/@mdi/font/5.3.45/
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_icons
    size: 160
    glyphs:
      - "\U000F0594" # clear-night
      - "\U000F0590" # cloudy
      - "\U000F0595" # partlycloudy
      - "\U000F0591" # fog      
      - "\U000F0592" # hail
      - "\U000F0593" # lightning
      - "\U000F067E" # lightning-rainy
      - "\U000F0596" # pouring
      - "\U000F0597" # rainy
      - "\U000F0F36" # snowy
      - "\U000F067F" # snowy-rainy
      - "\U000F0599" # sunny
      - "\U000F059D" # windy
      - "\U000F059E" # windy-variant
      - "\U000F0F38" # exceptional
      
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_icons_small
    size: 56
    glyphs:
      - "\U000F10C2" # Temperature High
      - "\U000F10C3" # Temperature Low
      - "\U000F07E4" # CO2
      - "\U000F054B" # umbrella      
      - "\U000F0592" # hail
      - "\U000F0593" # lightning
      - "\U000F067E" # lightning-rainy
      - "\U000F0597" # rainy
      - "\U000F0F36" # snowy
      - "\U000F0594" # clear-night
      - "\U000F0599" # sunny
      - "\U000F07CA" # fuel
      - "\U000F024A" # flower
      - "\U000F051F" # time-remaining
      - "\U000F06E9" # Energy (electricty)
      - "\U000F0238" # Gas (fire)
      - "\U000F0F9B" # Energy Export
      - "\U000F0A72" # Solar Generation

button:
  - platform: restart
    name: "${esp_name} Restart"

  - platform: template
    name: "${esp_name} Refresh"
    icon: "mdi:update"
    on_press:
      then:
      - component.update: t5_display

binary_sensor:
  - platform: gpio
    pin: 
      number: GPIO39
      inverted: true
    name: "${esp_name} Button 1"
    on_press:
      then:
      - component.update: t5_display
      - deep_sleep.prevent: deep_sleep_1

sensor:
  - platform: adc
    pin: GPIO36
    name: "${esp_name} Battery Voltage"
    id: batt_volt
    attenuation: 11db
    update_interval: never
    filters:
      - multiply: 2

  - platform: template
    name: "${esp_name} Battery"
    id: batt
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: battery
    lambda: |-
      int y = (1-(4.1-id(batt_volt).state)/(4.1-3.3))*100;
      if (y < 100) {return y;} else {return 100;};
    update_interval: never

  - platform: homeassistant
    entity_id: sensor.fineoffset_wh5_176_t
    id: ext_temp
    internal: true

  - platform: homeassistant
    entity_id: sensor.openweathermap_forecast_precipitation_probability
    id: prec_perc
    internal: true

  - platform: homeassistant
    entity_id: sensor.openweathermap_forecast_temperature_low
    id: fc_low
    internal: true

  - platform: homeassistant
    entity_id: sensor.openweathermap_forecast_temperature
    id: fc_high
    internal: true

  - platform: homeassistant
    entity_id: sensor.daily_rainfall
    id: rainfall
    internal: true

# Lounge
  - platform: homeassistant
    entity_id: sensor.lounge_temperature_and_humidity_temperature
    id: lr_temp
    internal: true

# Bedroom
  - platform: homeassistant
    entity_id: sensor.main_bedroom_temperature_and_humidity_temperature
    id: br_temp
    internal: true
  
  - platform: homeassistant
    entity_id: sensor.smart_meter_electricity_import_today
    id: kwh_daily_import
    internal: true

  - platform: homeassistant
    entity_id: sensor.daily_solar_generation
    id: kwh_daily_solar
    internal: true

  - platform: homeassistant
    entity_id: sensor.daily_electricity_export
    id: kwh_daily_export
    internal: true

  - platform: homeassistant
    entity_id: sensor.gas_consumption_today
    id: kwh_gas_daily
    internal: true

    on_value: # Actions to perform once data for the last sensor has been received
      then:
        - script.execute: all_data_received    

text_sensor:
  - platform: homeassistant
    entity_id: sensor.openweathermap_precipitation_kind
    id: fc_prec
    internal: true

  - platform: homeassistant
    entity_id: sensor.openweathermap_forecast_condition
    id: fc_weather
    internal: true
    #on_value: # Actions to perform once data for the last sensor has been received
    #  then:
    #    - script.execute: all_data_received    

script:
  - id: all_data_received
    then:
      - component.update: batt_volt
      - component.update: batt
      - component.update: t5_display
      - delay: 3s
      - script.execute: enter_sleep     

  - id: enter_sleep
    then:
      - if:
          condition:
            lambda: |- 
              auto time = id(ntp).now();
              if (!time.is_valid()) { 
                return false;
              }
              return (time.hour < 6); 
          then:
            - logger.log: "It's nighttime, entering long sleep for ${night_sleep_time}"          
          #  - deep_sleep.enter: 
          #      id: deep_sleep_1 
          #      sleep_duration: ${night_sleep_time}
          else:
            - logger.log: "It's daytime, entering short sleep for ${sleep_time}"             
          #  - deep_sleep.enter: 
          #      id: deep_sleep_1 
          #      sleep_duration: ${sleep_time}

display:
  - platform: lilygo_t5_47
    id: t5_display
    rotation: 90
    update_interval: never
    lambda: |-
      #define xres 540 
      #define yres 960
      #define x_pad 8              // border padding
      #define y_pad 8              // border padding      

      #define cat_pad  75          // padding before category
      #define val_pad  60          // padding before value
      #define icon_pad 70          // padding after icons      

      #define x1n 20               // x position 1st column name
      #define x1v 25               // x position 1st column value
      #define x1i 50               // x position 1st column icon
      #define x1vr (x2n-20)        // x position 1st column RHS

      #define x2n (xres/2)         // x position 2nd column name
      #define x2v (xres/2+5)       // x position 2nd column value
      #define x2i (xres/2+30)      // x position 1st column icon
      #define x2vr (xres-20)       // x position 2nd column RHS
      
      int y = 0;
      
      // Date
      it.strftime(xres/2, y+y_pad, id(font_name), TextAlign::TOP_CENTER, "%A %d-%b-%Y", id(ntp).now());
      y+=val_pad+cat_pad+10;

      #define weather_icon_x xres/4-x_pad

      //Weather forecast Icon
      if (id(fc_weather).state == "clear-night") {
        it.printf(weather_icon_x, y, id(font_icons), TextAlign::CENTER, "\U000F0594");}
      if (id(fc_weather).state == "cloudy") {
        it.printf(weather_icon_x, y, id(font_icons), TextAlign::CENTER, "\U000F0590");}
      if (id(fc_weather).state == "partlycloudy") {
        it.printf(weather_icon_x, y, id(font_icons), TextAlign::CENTER, "\U000F0595");}
      if (id(fc_weather).state == "fog") {
        it.printf(weather_icon_x, y, id(font_icons), TextAlign::CENTER, "\U000F0591");}
      if (id(fc_weather).state == "hail") {
        it.printf(weather_icon_x, y, id(font_icons), TextAlign::CENTER, "\U000F0592");}
      if (id(fc_weather).state == "lightning") {
        it.printf(weather_icon_x, y, id(font_icons), TextAlign::CENTER, "\U000F0593");}
      if (id(fc_weather).state == "lightning-rainy") {
        it.printf(weather_icon_x, y, id(font_icons), TextAlign::CENTER, "\U000F067E");}
      if (id(fc_weather).state == "pouring") {
        it.printf(weather_icon_x, y, id(font_icons), TextAlign::CENTER, "\U000F0596");}
      if (id(fc_weather).state == "rainy") {
        it.printf(weather_icon_x, y, id(font_icons), TextAlign::CENTER, "\U000F0597");}
      if (id(fc_weather).state == "snowy") {
        it.printf(weather_icon_x, y, id(font_icons), TextAlign::CENTER, "\U000F0F36");}
      if (id(fc_weather).state == "snowy-rainy") {
        it.printf(weather_icon_x, y, id(font_icons), TextAlign::CENTER, "\U000F067F");}
      if (id(fc_weather).state == "sunny") {
        it.printf(weather_icon_x, y, id(font_icons), TextAlign::CENTER, "\U000F0599");}
      if (id(fc_weather).state == "windy") {
        it.printf(weather_icon_x, y, id(font_icons), TextAlign::CENTER, "\U000F059D");}
      if (id(fc_weather).state == "windy-variant") {
        it.printf(weather_icon_x, y, id(font_icons), TextAlign::CENTER, "\U000F059E");}
      if (id(fc_weather).state == "exceptional") {
        it.printf(weather_icon_x, y, id(font_icons), TextAlign::CENTER, "\U000F0F38");} 
      
      // Max Daily Temperature
      it.printf(x2n,          y, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F10C2"); // thermometer symbol
      
      it.printf(x2vr, y, id(font_value),       TextAlign::BASELINE_RIGHT, "%4.1f°C", id(fc_high).state);

      y+=val_pad;

      // Forecast symbol + probability
      #define temp_icon_x x2i
      if (id(fc_prec).state == "None") {
        it.printf(x2n, y, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F054B");}
      if (id(fc_prec).state == "Hail") {
        it.printf(x2n, y, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F0592");}
      if (id(fc_prec).state == "Rain") {
        it.printf(x2n, y, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F0597");}
      if (id(fc_prec).state == "Snow") {
        it.printf(x2n, y, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F0F36");}
      
      it.printf(x2vr, y, id(font_value), TextAlign::BASELINE_RIGHT, "%4.0f%%", id(prec_perc).state);

      //Divider
      #define div_pad 30
      #define div_thickness 4
      it.filled_rectangle(x_pad, y+div_pad, xres-2*x_pad, div_thickness);
      
      y+=div_pad+div_thickness;
      y+=val_pad;      

      // ----------------------------------------------------------------------------------
      // Outside Temp + Precipitation
      it.print(x1n, y, id(font_name), TextAlign::BASELINE_LEFT, "Outside");
      it.print(x2n, y, id(font_name), TextAlign::BASELINE_LEFT, "Rainfall");
      y+=val_pad;      
      it.printf(x1v, y, id(font_value), TextAlign::BASELINE_LEFT, "%6.1f°C", id(ext_temp).state);
      it.printf(x2v, y, id(font_value), TextAlign::BASELINE_LEFT, "%3.1fmm", id(rainfall).state);
      y +=cat_pad;

      //      
      //Living Room
      it.print(x1n, y, id(font_name), TextAlign::BASELINE_LEFT, "Lounge");
      y+= val_pad;      

      it.printf(x1v, y, id(font_value), TextAlign::BASELINE_LEFT, "%6.1f°C", id(lr_temp).state);

      y += cat_pad;
      
      //Bedroom
      it.print(x1n, y, id(font_name), TextAlign::BASELINE_LEFT, "Bedroom");
      y+= val_pad;      

      it.printf(x1v, y, id(font_value), TextAlign::BASELINE_LEFT, "%6.1f°C", id(br_temp).state);
      
      //Divider
      #define div_pad 30
      #define div_thickness 4
      it.filled_rectangle(x_pad, y+div_pad, xres-2*x_pad, div_thickness);
      
      y+=div_pad+div_thickness;
      y+=val_pad;      

      //      // Fuel and Energy
      it.printf(x1v, y, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F0238"); // Gas
      it.printf(x1vr, y, id(font_value), TextAlign::BASELINE_RIGHT, "%5.1f", id(kwh_gas_daily).state);      
      it.printf(x1vr, y, id(font_units), TextAlign::BASELINE_LEFT, " kWh");
      
      y+=val_pad;      
      it.printf(x1v, y, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F06E9"); // Energy Import
      it.printf(x1vr, y, id(font_value), TextAlign::BASELINE_RIGHT, "%5.1f", id(kwh_daily_import).state);      
      it.printf(x1vr, y, id(font_units), TextAlign::BASELINE_LEFT, " kWh");

      y+=val_pad;      
      it.printf(x1v, y, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F0F9B"); // Energy Export
      it.printf(x1vr, y, id(font_value), TextAlign::BASELINE_RIGHT, "%5.1f", id(kwh_daily_export).state);      
      it.printf(x1vr, y, id(font_units), TextAlign::BASELINE_LEFT, " kWh");

      y+=val_pad; 
      it.printf(x1v, y, id(font_icons_small), TextAlign::BASELINE_LEFT, "\U000F0A72"); // Solar Generation
      it.printf(x1vr, y, id(font_value), TextAlign::BASELINE_RIGHT, "%5.1f", id(kwh_daily_solar).state);      
      it.printf(x1vr, y, id(font_units), TextAlign::BASELINE_LEFT, " kWh");
      
      // Footer
      it.strftime(x_pad, yres-y_pad/2, id(font_footer), TextAlign::BASELINE_LEFT, "Updated: %H:%M", id(ntp).now());
      it.printf(xres-x_pad, yres-y_pad/2, id(font_footer), TextAlign::BASELINE_RIGHT, "%.2fV/%.0f%%", id(batt_volt).state, id(batt).state);
    
    