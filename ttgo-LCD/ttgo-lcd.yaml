esphome:
  name: ttgo-lcd
  friendly_name: TTGO-LCD
  platform: ESP32
  board: esp32dev

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key_ttgo_lcd


ota:
  password: !secret ota_password_ttgo_lcd

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Ttgo-Lcd Fallback Hotspot"
    password: !secret ap_fallback_password

captive_portal:

spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 12

sensor:
  - platform: homeassistant
    id: grid_power
    entity_id: sensor.smart_meter_electricity_power
    internal: true
  - platform: homeassistant
    id: solar_power
    entity_id: sensor.solaredge_ac_power
    internal: true

font:
  - file: "fonts/Google_Sans_Medium.ttf"
    id: my_font
    size: 56   

display:
  platform: ili9xxx
  model: ili9341
  id: t4_display
  cs_pin: 27
  dc_pin: 26
  reset_pin: 5
  rotation: 90
  update_interval: 2s
  lambda: |-
    it.fill(Color::BLACK);

    #define x1_col    0
    #define x2_col    320
    #define y_spacing 80

    #define GRID_COLOUR   Color(255,0,0)
    #define SOLAR_COLOUR  Color(0,255,0)
    #define IMPORT_COLOUR Color(255,0,0)
    #define EXPORT_COLOUR Color(0,0,255)

    int y = 0;

    if (id(grid_power).state >= 0) {
      it.print(x1_col, y, id(my_font), GRID_COLOUR, TextAlign::TOP_LEFT, "Grid");
      it.printf(x2_col, y, id(my_font), GRID_COLOUR, TextAlign::TOP_RIGHT, "%5.0f", id(grid_power).state);
    } else {
      it.print(x1_col, y, id(my_font), EXPORT_COLOUR, TextAlign::TOP_LEFT, "Export");
      it.printf(x2_col, y, id(my_font), EXPORT_COLOUR, TextAlign::TOP_RIGHT, "%5.0f", -id(grid_power).state);
    }

    y += y_spacing;
    it.print(x1_col, y, id(my_font), SOLAR_COLOUR, TextAlign::TOP_LEFT, "Solar ");
    it.printf(x2_col, y, id(my_font), SOLAR_COLOUR, TextAlign::TOP_RIGHT, "%5.0f", id(solar_power).state);
    
    y += y_spacing;
    Color house_colour = (id(grid_power).state > 0) ? IMPORT_COLOUR : SOLAR_COLOUR;
    float consumption = id(grid_power).state + id(solar_power).state;
    it.print(x1_col, y, id(my_font), house_colour, TextAlign::TOP_LEFT, "House ");
    it.printf(x2_col, y, id(my_font), house_colour, TextAlign::TOP_RIGHT, "%5.0f", consumption);
    
