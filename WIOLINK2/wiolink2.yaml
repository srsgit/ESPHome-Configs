esphome:
  name: wiolink2
  friendly_name: WIOLINK2
  on_boot:
    light.turn_on:
      id: powerlights2
      effect: "Gauge"
      brightness: 30%

esp8266:
  board: wio_link

# Define an Output that turns on the Grove Power on the WioLink
output:
  - platform: gpio
    id: SENSORS_ON
    pin:
      number: GROVE
      mode: INPUT_PULLUP

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key_wiolink2

ota:
  password: !secret ota_password_wiolink2

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Wiolink2 Fallback Hotspot"
    password: !secret ap_fallback_password

captive_portal:

# Solar and Grid sensors from HA
# Scaled to number of LED in strip
sensor:
  - platform: homeassistant
    id: grid_power
    entity_id: sensor.smart_meter_electricity_power
    internal: true
    filters:
      - calibrate_linear:
          # Map 4000 (from sensor) to 40 (neopixel scale)
          - -4000.0 -> -40
          - 0.0 -> 0.0
          - 4000 -> 40
  - platform: homeassistant
    id: solar_power
    entity_id: sensor.solaredge_ac_power
    internal: true
    filters:
      - calibrate_linear:
          # Map 4000 (from sensor) to 40 (neopixel scale)
          - 0.0 -> 0.0
          - 4000 -> 40

light:
  - platform: neopixelbus
    variant : WS2812

    # Digital 0 Grove Connector
    pin: GPIO14

    # Length of chosen led string
    num_leds: 40
    name: "Powerlights2"
    id: powerlights2

    # Do not expose as a light to HA
    internal: True
    restore_mode: ALWAYS_ON

    effects:
      - addressable_lambda:
          name: "Gauge"
          update_interval: 2s
          lambda: |-

            #define grid_colour    Color(120,0,0)   // Red
            #define solar_colour   Color(0,130,0)   // Green
            #define export_colour  Color(0,0,180)   // Blue
            #define marker_colour  Color(30,30,30)  // pale white
            #define lighten_by     120              // lighten marker LED
            
            if (initial_run == true) {
              id(solar_power).state = 0;
              id(grid_power).state = 0;
            }

            // Clear LEDs
            it.all() = Color::BLACK;

            // Marker every 10 equiv to 1000W bands
            // LED string index starts at ZERO and [0] represents 100W
            for (int i = 9; i < 40; i += 10) {
              it[i] = marker_colour;
            }

            // use different colours depending on grid import/export
            if (id(grid_power).state > 0) {

              // importing at least some from grid
              it.range(0, id(solar_power).state) = solar_colour;
              it.range(id(solar_power).state, id(solar_power).state + id(grid_power).state) = grid_colour;

            } else {

              // exporting some of solar
              it.range(0, id(solar_power).state) = export_colour;
              it.range(0, id(solar_power).state + id(grid_power).state) = solar_colour; 
            }
            // Redo Marker every 10 equiv to 1000W bands
            for (int i = 9; i < 40; i += 10) {
              it[i].lighten(lighten_by);
            }
    